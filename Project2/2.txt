Homework 2, due 
Problem 1. 
Description
Suppose you are opening your own tiny bank, and want to manage the bank accounts in your bank. In your bank, there are only two kinds of account: checking and saving. Both of them should have an account number, and should be able to perform deposit, withdraw and check balance operations. People can open a new account with some money deposited, or no money at all. Checking account and saving account perform differently in some aspects, and there are some requirement to meet about the bank accounts: 

Checking account need a minimum balance of $50 to avoid the monthly fee $2. 
Saving account can have at most three transactions (deposit or withdraw) in a month, otherwise there will be monthly fee $5. 
Saving account has no minimum balance requirement, and checking account has no transaction times limit. 
The monthly fee is based on the balance at the end of a month. That means you can avoid the fee by putting some money in your checking account just the day before the end of month. 
At the end of each month, saving account can have some interest. The default interest rate is 5% for a month ( wow, I wish my citibank can have so high interest rate!) , and based on the ending balance of that month. The interest computation is before any monthly fee deduction (I'm nice again). 
Adding the interest and deducting monthly fee are not considered as a transaction. They are internal thing. 
The interest computation and monthly deduction can only happen at the end of a month 
You don't need to consider when is the end of a month. Whenever you call endMonth(...), that means we are at the end of a month now.  
Finally, there is a requirement about the account number. No two accounts, no matter checking or saving, can have the same account number. And the account number should keep increasing when you create a new account. Even some account get closed, the account number cannot be reused.  Hint* see below.  
I here provide some simple test code. I should be able directly run this code directly with any additional class you write. 

class AccountTest{
    public static void main(String[] args){

        BankAccount[] bank = new BankAccount[10];
        for(int i=0;i<5;i++)
            bank[i]=new CheckingAccount(50);
        for(int i=5;i<10;i++)
            bank[i]=new SavingAccount(100);

        for(int i=0;i<10;i++){
           bank[i].withdraw(20);
            bank[i].deposit(10);
            //bank[i].withdraw(10); 
        }

        for(int i=0;i<10;i++){
            bank[i].endMonth();
            bank[i].print(); 
        }

    } 
}

From the above code, you should be able to tell all the class name, and maybe their relationship already. Also you can see what are the necessary methods you have to implement. You can add your own to make your own little bank more complete. Also, the test code doesn't cover every requirement I listed above. So, please don't use it as a fully judgment. You'd better write some test code yourself to fully test your implementation. 

One more thing requirement is: the bank ONLY allows checking or saving account! ( This means ...... If you can't get it, email me. :-) )

The output should look similar to the following with the basic information about account type, number, and balance. But you can make it as fancy as you like.

>java AccountTest
my checking number is 1, my balance is 38.0
my checking number is 2, my balance is 38.0
my checking number is 3, my balance is 38.0
my checking number is 4, my balance is 38.0
my checking number is 5, my balance is 38.0
my saving number is 6, my balance is 94.5
my saving number is 7, my balance is 94.5
my saving number is 8, my balance is 94.5
my saving number is 9, my balance is 94.5
my saving number is 10, my balance is 94.5

 

Points
30 pts: Correct class definition, class relationship 
40 pts: The methods inside are properly defined, and avoid duplicate coding 
10 pts: Complete validity check. For example, you cannot deposit negative amount of money 
10 pts: My simple test code can run correctly. Note, not enough to get everything correct! 
10 pts: For readability, proper comment, and any extra work you do. 
*Hint:  
Use some static field to remember the total account number been opened so far.